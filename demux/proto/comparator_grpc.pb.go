// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: comparator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComparatorClient is the client API for Comparator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComparatorClient interface {
	CompareImages(ctx context.Context, in *ImageCompareRequest, opts ...grpc.CallOption) (*ImageCompareReply, error)
}

type comparatorClient struct {
	cc grpc.ClientConnInterface
}

func NewComparatorClient(cc grpc.ClientConnInterface) ComparatorClient {
	return &comparatorClient{cc}
}

func (c *comparatorClient) CompareImages(ctx context.Context, in *ImageCompareRequest, opts ...grpc.CallOption) (*ImageCompareReply, error) {
	out := new(ImageCompareReply)
	err := c.cc.Invoke(ctx, "/comparator.Comparator/CompareImages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComparatorServer is the server API for Comparator service.
// All implementations must embed UnimplementedComparatorServer
// for forward compatibility
type ComparatorServer interface {
	CompareImages(context.Context, *ImageCompareRequest) (*ImageCompareReply, error)
	mustEmbedUnimplementedComparatorServer()
}

// UnimplementedComparatorServer must be embedded to have forward compatible implementations.
type UnimplementedComparatorServer struct {
}

func (UnimplementedComparatorServer) CompareImages(context.Context, *ImageCompareRequest) (*ImageCompareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareImages not implemented")
}
func (UnimplementedComparatorServer) mustEmbedUnimplementedComparatorServer() {}

// UnsafeComparatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComparatorServer will
// result in compilation errors.
type UnsafeComparatorServer interface {
	mustEmbedUnimplementedComparatorServer()
}

func RegisterComparatorServer(s grpc.ServiceRegistrar, srv ComparatorServer) {
	s.RegisterService(&Comparator_ServiceDesc, srv)
}

func _Comparator_CompareImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageCompareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComparatorServer).CompareImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comparator.Comparator/CompareImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComparatorServer).CompareImages(ctx, req.(*ImageCompareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comparator_ServiceDesc is the grpc.ServiceDesc for Comparator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comparator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comparator.Comparator",
	HandlerType: (*ComparatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompareImages",
			Handler:    _Comparator_CompareImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comparator.proto",
}

// RendererClient is the client API for Renderer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RendererClient interface {
	RenderImage(ctx context.Context, in *RenderImageRequest, opts ...grpc.CallOption) (*RenderImageReply, error)
	DeliverImage(ctx context.Context, in *DeliverImageRequest, opts ...grpc.CallOption) (*DeliverImageReply, error)
}

type rendererClient struct {
	cc grpc.ClientConnInterface
}

func NewRendererClient(cc grpc.ClientConnInterface) RendererClient {
	return &rendererClient{cc}
}

func (c *rendererClient) RenderImage(ctx context.Context, in *RenderImageRequest, opts ...grpc.CallOption) (*RenderImageReply, error) {
	out := new(RenderImageReply)
	err := c.cc.Invoke(ctx, "/comparator.Renderer/RenderImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rendererClient) DeliverImage(ctx context.Context, in *DeliverImageRequest, opts ...grpc.CallOption) (*DeliverImageReply, error) {
	out := new(DeliverImageReply)
	err := c.cc.Invoke(ctx, "/comparator.Renderer/DeliverImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RendererServer is the server API for Renderer service.
// All implementations must embed UnimplementedRendererServer
// for forward compatibility
type RendererServer interface {
	RenderImage(context.Context, *RenderImageRequest) (*RenderImageReply, error)
	DeliverImage(context.Context, *DeliverImageRequest) (*DeliverImageReply, error)
	mustEmbedUnimplementedRendererServer()
}

// UnimplementedRendererServer must be embedded to have forward compatible implementations.
type UnimplementedRendererServer struct {
}

func (UnimplementedRendererServer) RenderImage(context.Context, *RenderImageRequest) (*RenderImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderImage not implemented")
}
func (UnimplementedRendererServer) DeliverImage(context.Context, *DeliverImageRequest) (*DeliverImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverImage not implemented")
}
func (UnimplementedRendererServer) mustEmbedUnimplementedRendererServer() {}

// UnsafeRendererServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RendererServer will
// result in compilation errors.
type UnsafeRendererServer interface {
	mustEmbedUnimplementedRendererServer()
}

func RegisterRendererServer(s grpc.ServiceRegistrar, srv RendererServer) {
	s.RegisterService(&Renderer_ServiceDesc, srv)
}

func _Renderer_RenderImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendererServer).RenderImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comparator.Renderer/RenderImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendererServer).RenderImage(ctx, req.(*RenderImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renderer_DeliverImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RendererServer).DeliverImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comparator.Renderer/DeliverImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RendererServer).DeliverImage(ctx, req.(*DeliverImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Renderer_ServiceDesc is the grpc.ServiceDesc for Renderer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Renderer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comparator.Renderer",
	HandlerType: (*RendererServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderImage",
			Handler:    _Renderer_RenderImage_Handler,
		},
		{
			MethodName: "DeliverImage",
			Handler:    _Renderer_DeliverImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comparator.proto",
}
