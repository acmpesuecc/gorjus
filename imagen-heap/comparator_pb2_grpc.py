# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import comparator_pb2 as comparator__pb2


class ComparatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CompareImages = channel.unary_unary(
                '/comparator.Comparator/CompareImages',
                request_serializer=comparator__pb2.ImageCompareRequest.SerializeToString,
                response_deserializer=comparator__pb2.ImageCompareReply.FromString,
                )


class ComparatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CompareImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComparatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CompareImages': grpc.unary_unary_rpc_method_handler(
                    servicer.CompareImages,
                    request_deserializer=comparator__pb2.ImageCompareRequest.FromString,
                    response_serializer=comparator__pb2.ImageCompareReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comparator.Comparator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Comparator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CompareImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comparator.Comparator/CompareImages',
            comparator__pb2.ImageCompareRequest.SerializeToString,
            comparator__pb2.ImageCompareReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RendererStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RenderImage = channel.unary_unary(
                '/comparator.Renderer/RenderImage',
                request_serializer=comparator__pb2.RenderImageRequest.SerializeToString,
                response_deserializer=comparator__pb2.RenderImageReply.FromString,
                )
        self.DeliverImage = channel.unary_unary(
                '/comparator.Renderer/DeliverImage',
                request_serializer=comparator__pb2.DeliverImageRequest.SerializeToString,
                response_deserializer=comparator__pb2.DeliverImageReply.FromString,
                )


class RendererServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RenderImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeliverImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RendererServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RenderImage': grpc.unary_unary_rpc_method_handler(
                    servicer.RenderImage,
                    request_deserializer=comparator__pb2.RenderImageRequest.FromString,
                    response_serializer=comparator__pb2.RenderImageReply.SerializeToString,
            ),
            'DeliverImage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeliverImage,
                    request_deserializer=comparator__pb2.DeliverImageRequest.FromString,
                    response_serializer=comparator__pb2.DeliverImageReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comparator.Renderer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Renderer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RenderImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comparator.Renderer/RenderImage',
            comparator__pb2.RenderImageRequest.SerializeToString,
            comparator__pb2.RenderImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeliverImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comparator.Renderer/DeliverImage',
            comparator__pb2.DeliverImageRequest.SerializeToString,
            comparator__pb2.DeliverImageReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
